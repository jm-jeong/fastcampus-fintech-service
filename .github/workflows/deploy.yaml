name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: s3-fastcampus-fintech
  CODE_DEPLOY_APPLICATION_NAME: FINTECH-CODE-DEPLOY
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: CODE-DEPLOY-GROUP
  RESOURCE_PATH: ./api-server/src/main/resources/application.yaml

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # (2) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set yaml secret
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          jwt.secret-key: ${{ secrets.JWT_SECRET_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # (3) Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA .
        shell: bash

      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드( # Make zip file 단계에서 압축된 빌드 파일을 S3 버킷에 업로드하는 단계이다.)
      - name: Upload to AWS S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip

      # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
